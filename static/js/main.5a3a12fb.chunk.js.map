{"version":3,"sources":["Main/page-not-found.svg","Navbar/logo.svg","Navbar/trash.svg","Navbar/rubber.svg","Navbar/Navbar.js","Grid/Grid.js","Footer/github.svg","Footer/Footer.js","queue.js","Main/Main.js","NotFound/404.svg","NotFound/NotFound.js","Tutorial/trash.svg","Tutorial/rubber.svg","Tutorial/source.svg","Tutorial/dest.svg","Tutorial/Tutorial.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","handleChangeAlgo","algorithm","changeAlgo","changeButton","document","getElementById","textContent","style","width","window","onclick","event","target","matches","dropdowns","getElementsByClassName","i","length","openDropdown","classList","contains","remove","className","to","src","logo","alt","height","id","onClick","toggle","handleMazeGeneration","handleVerticalSkew","handleHorizontalSkew","handleRandomMazeGenerate","type","eraser","handleVisitedReset","trash","handleCompleteReset","algo","mazeAlgo","handleBFS","handleDFS","handleVisualize","Grid","useState","hold","setHold","handleToggle","reached","distance","grid","map","row","rowIdx","cellValue","cellIdx","cellType","visit","rowInd","colInd","x","y","dest","getCellType","onMouseOver","r","c","isVisualised","running","wall","setIsMazeVisualised","Footer","href","github","Queue","this","items","element","push","isEmpty","shift","n","m","dx","dy","Main","setAlgo","setMazeAlgo","createGrid","setGrid","setIsVisualised","isMazeVisualised","Infinity","setDistance","setRunning","setReached","Math","floor","setSrc","setDest","alert","setAlert","visited","parent","button1","button2","button5","disabled","removeAttribute","button3","button4","restore_buttons","j","par_x","par_y","color","copy","retrack","evenRandomNumberInRange","a","b","random","oddRandomNumberInRange","qu","enqueue","dist","got","node","front","dequeue","child_x","child_y","Promise","setTimeout","curr_x","curr_y","rev_path","x_cor","y_cor","tmp","reverse","newAlgo","changeMazeAlgo","obtainedPath","console","log","paths","DFShelper","show","recursiveDivisionMaze","rowStart","rowEnd","colStart","colEnd","orientation","surroundingWalls","rowSelectedForWalls","colSelectedForHole","colSelectedForWalls","rowSelectedForHole","horizontalSkew","percentage","verticalSkew","pageNotFound","col","board","Array","NotFound","history","useHistory","fourOfour","Tutorial","pageNumber","setPageNumber","handleNextPage","currentPage","handleSkipPage","source","rubber","App","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"4YAAe,MAA0B,2CCA1B,MAA0B,iCCA1B,MAA0B,kCCA1B,MAA0B,mC,uBCM1B,SAASA,EAAOC,GAE3B,IAAMC,EAAmB,SAACC,GACtBF,EAAMG,WAAWD,GACjB,IAAIE,EAAeC,SAASC,eAAe,KAE3CF,EAAaG,YAAc,aAAgBL,EACX,UAA7BE,EAAaI,MAAMC,QAClBL,EAAaI,MAAMC,MAAQ,UAuBnCC,OAAOC,QAAU,SAASC,GACtB,IAAKA,EAAMC,OAAOC,QAAQ,eAEtB,IADA,IAAIC,EAAYV,SAASW,uBAAuB,cACvCC,EAAI,EAAGA,EAAIF,EAAUG,OAAQD,IAAK,CACvC,IAAIE,EAAeJ,EAAUE,GACzBE,EAAaC,UAAUC,SAAS,SAChCF,EAAaC,UAAUE,OAAO,QAI1C,IAAKV,EAAMC,OAAOC,QAAQ,eAAgB,CACtCC,EAAYV,SAASW,uBAAuB,mBAC5C,IAAK,IAAIC,EAAI,EAAGA,EAAIF,EAAUG,OAAQD,KAClCE,EAAeJ,EAAUE,IACRG,UAAUC,SAAS,SAChCF,EAAaC,UAAUE,OAAO,UAc9C,OACI,mCACA,sBAAKC,UAAU,WAAf,UACI,qBAAKA,UAAU,OAAf,SACI,cAAC,IAAD,CAAMC,GAAG,IAAT,SACI,qBAAKC,IAAKC,EAAMC,IAAI,OAAQC,OAAO,aAG3C,oBAAIL,UAAU,QAAd,yBACA,sBAAKA,UAAY,aAAjB,UACI,wBAAQA,UAAU,aAAaM,GAAG,IAAIC,QAAW,WAjBzDzB,SAASC,eAAe,QAAQc,UAAUW,OAAO,SAiBzC,0BAEA,qBAAIR,UAAY,aAAaM,GAAG,OAAhC,UACI,oBAAIN,UAAY,MAAMO,QAAW,kBAAM7B,EAAiB,QAAxD,kCACA,oBAAIsB,UAAY,MAAMO,QAAW,kBAAM7B,EAAiB,QAAxD,sCAIR,sBAAKsB,UAAY,iBAAjB,UACI,wBAAQA,UAAU,aAAaM,GAAG,IAAIC,QAAW,WAtBzDzB,SAASC,eAAe,YAAYc,UAAUW,OAAO,SAsB7C,6BACA,qBAAIR,UAAY,kBAAkBM,GAAG,WAArC,UACI,oBAAIN,UAAY,KAAKO,QAAW,kBAAM9B,EAAMgC,wBAA5C,gCACA,oBAAIT,UAAY,KAAKO,QAAW,kBAAM9B,EAAMiC,sBAA5C,2BACA,oBAAIV,UAAY,KAAKO,QAAW,kBAAM9B,EAAMkC,wBAA5C,6BACA,oBAAIX,UAAY,KAAKO,QAAW,kBAAM9B,EAAMmC,4BAA5C,+BAGR,sBAAKZ,UAAU,QAAQM,GAAG,OAA1B,UACI,uBAAOO,KAAK,QAAQX,IAAKY,EAAQV,IAAI,SAASC,OAAS,OAAOL,UAAY,qBAAqBM,GAAG,IAAIC,QAAS,kBAAM9B,EAAMsC,wBAC3H,uBAAOF,KAAK,QAAQX,IAAKc,EAAOZ,IAAI,QAAQC,OAAS,OAAOL,UAAY,gBAAgBM,GAAG,IAAIC,QAAS,kBAAM9B,EAAMwC,4BAExH,wBAAQjB,UAAY,SAASO,QAAW,kBA/ExB,WACpB,GAAkB,KAAf9B,EAAMyC,MAAkC,KAAnBzC,EAAM0C,SAAgB,CAC1C,IAAItC,EAAeC,SAASC,eAAe,KAC3CF,EAAaG,YAAc,wBAC3BH,EAAaI,MAAMC,MAAQ,YAGT,QAAfT,EAAMyC,KACLzC,EAAM2C,aAEa,QAAf3C,EAAMyC,MAGS,UAAfzC,EAAMyC,OAFVzC,EAAM4C,YAoEoCC,IAAmBhB,GAAG,IAApE,4B,MC9FG,SAASiB,EAAK9C,GAAQ,IAAD,EACR+C,oBAAS,GADD,mBACzBC,EADyB,KACnBC,EADmB,KA6B1BC,EAAe,kBAAMD,GAASD,IAEpC,OACI,sBAAKzB,UAAU,WAAf,UACI,qBAAIA,UAAU,WAAd,yBAAsD,IAAhBvB,EAAMmD,QAAenD,EAAMoD,SAAS,SAA1E,OACA,qBAAK7B,UAAU,QAAf,SACCvB,EAAMqD,KAAKC,KAAI,SAACC,EAAKC,GAAN,OAChB,qBAAK3B,GAAI2B,EAAQjC,UAAU,MAA3B,SACKgC,EAAID,KAAI,SAACG,EAAWC,GACrB,IAAMC,EAnCE,SAACC,EAAOC,EAAQC,GAChC,IAAIH,EAAW,OAcf,OAbIE,IAAW7D,EAAMyB,IAAIsC,GAAKD,IAAW9D,EAAMyB,IAAIuC,EAC/CL,EAAW,SAEPE,IAAW7D,EAAMiE,KAAKF,GAAKD,IAAW9D,EAAMiE,KAAKD,EACrDL,EAAW,OAEoB,IAA1BC,EAAMC,GAAQC,GACnBH,EAAW,UACsB,IAA1BC,EAAMC,GAAQC,GACrBH,EAAW,UACsB,IAA1BC,EAAMC,GAAQC,KACrBH,EAAW,QAERA,EAoBkBO,CACblE,EAAMqD,KACNG,EACAE,GAEJ,OAAO,qBAAKnC,UAAWoC,EAAU9B,GAAI2B,EAAQ,IAAKE,EAAS5B,QAASoB,EAAciB,YAAa,kBAtBhFC,EAsBwGZ,EAtBtGa,EAsB8GX,OArB5HrD,SAASC,eAAe8D,EAAI,IAAMC,KACjCrE,EAAMsE,eAAiBtE,EAAMuE,SAAWvB,IAChDhD,EAAMwE,KAAKJ,EAAEC,GACbrE,EAAMyE,qBAAoB,KAJR,IAACL,EAAEC,GAsBV,4B,UC9CR,MAA0B,mCCI1B,SAASK,IACpB,OACI,sBAAKnD,UAAY,SAAjB,UACI,mBAAGoD,KAAK,uDAAR,SACI,qBAAKlD,IAAKmD,EAAQhD,OAAO,OAAOD,IAAI,aAExC,oBAAIJ,UAAY,UAAhB,yC,oBCcGsD,E,WAtBX,aACC,oBACGC,KAAKC,MAAQ,G,2CAGjB,SAAQC,GACJF,KAAKC,MAAME,KAAKD,K,qBAEpB,WACI,OAAIF,KAAKI,UACE,YACJJ,KAAKC,MAAMI,U,mBAEtB,WACI,OAAIL,KAAKI,UACE,uBACJJ,KAAKC,MAAM,K,qBAEtB,WACI,OAA6B,IAAtBD,KAAKC,MAAM7D,W,KCZpBkE,G,MAAI,IAAIC,EAAI,GAEZC,EAAK,CAAC,EAAG,EAAG,GAAI,GAChBC,EAAK,CAAC,GAAI,EAAG,EAAG,GAEP,SAASC,IAAO,MAGHzC,mBAAS,IAHN,mBAGpBN,EAHoB,KAGdgD,EAHc,OAIK1C,mBAAS,IAJd,mBAIpBL,EAJoB,KAIVgD,EAJU,OAQH3C,mBAAS4C,EAAWP,EAAGC,IARpB,mBAQpBhC,EARoB,KAQduC,EARc,OASa7C,oBAAS,GATtB,mBASpBuB,EAToB,KASNuB,EATM,OAUqB9C,oBAAS,GAV9B,mBAUpB+C,EAVoB,KAUFrB,EAVE,OAWK1B,mBAASgD,KAXd,mBAWpB3C,EAXoB,KAWV4C,EAXU,OAYGjD,oBAAS,GAZZ,mBAYpBwB,EAZoB,KAYX0B,EAZW,OAaGlD,oBAAS,GAbZ,mBAapBI,EAboB,KAaX+C,EAbW,OAcLnD,mBAAS,CAACgB,EAAGoC,KAAKC,MAAMhB,EAAE,GAAIpB,EAAG,IAd5B,mBAcpBvC,EAdoB,KAcf4E,EAde,OAeHtD,mBAAS,CAACgB,EAAGoC,KAAKC,MAAMhB,EAAE,GAAIpB,EAAGqB,KAf9B,mBAepBpB,GAfoB,KAedqC,GAfc,QAgBDvD,oBAAS,GAhBR,qBAgBpBwD,GAhBoB,MAgBbC,GAhBa,MAkBvBC,GAAUd,EAAWP,EAAGC,GACxBqB,GAASf,EAAWP,EAAGC,GAG3B,GAAGd,EAAQ,CACP,IAAIoC,GAAUtG,SAASC,eAAe,KAClCsG,GAAUvG,SAASC,eAAe,KAClCuG,GAAUxG,SAASC,eAAe,KAEtCqG,GAAQG,UAAW,EACnBH,GAAQI,gBAAgB,cACxBJ,GAAQpF,UAAY,iBAEpBqF,GAAQE,UAAW,EACnBF,GAAQG,gBAAgB,cACxBH,GAAQrF,UAAY,iBAEpBsF,GAAQC,UAAW,EACnBD,GAAQtG,YAAc,WACtBsG,GAAQE,gBAAgB,UACxBF,GAAQtF,UAAY,WAGxB,GAAG+C,EAAa,CACZ,IAAI0C,GAAU3G,SAASC,eAAe,KACtC0G,GAAQzF,UAAY,YACpByF,GAAQF,UAAW,MAEnB,CACA,IAAIE,GAAU3G,SAASC,eAAe,KACnC0G,KACCA,GAAQD,gBAAgB,aACxBC,GAAQzF,UAAY,qBACpByF,GAAQF,UAAW,GAI3B,GAAGhB,IAAgC,IAAZvB,EAAkB,CACrC,IAAI0C,GAAU5G,SAASC,eAAe,KACtC2G,GAAQ1F,UAAY,YACpB0F,GAAQH,UAAW,MAEnB,CACA,IAAIG,GAAU5G,SAASC,eAAe,KACnC2G,KACCA,GAAQF,gBAAgB,aACxBE,GAAQ1F,UAAY,gBACpB0F,GAAQH,UAAW,GA6B3B,IAzBA,IAAMI,GAAkB,WACpB,IAAIP,EAAUtG,SAASC,eAAe,KAClCsG,EAAUvG,SAASC,eAAe,KAClCuG,EAAUxG,SAASC,eAAe,KAEtCqG,EAAQG,UAAW,EACnBH,EAAQpF,UAAY,aAEpBqF,EAAQE,UAAW,EACnBF,EAAQrF,UAAY,aAEpBsF,EAAQC,UAAW,EACnBD,EAAQtF,UAAY,SACpBsF,EAAQtG,YAAc,aAYjBU,GAAI,EAAGA,GAAImE,EAAGnE,KACnB,IAAK,IAAIkG,GAAI,EAAGA,GAAI9B,EAAG8B,KACnBT,GAAOzF,IAAGkG,IAAK,CACXC,OAAQ,EACRC,OAAQ,GAKpB,IAAMC,GAAQ,SAAClD,EAAGC,GACd,IAAIkD,EAAI,YAAOlE,GACfkE,EAAKnD,GAAGC,GAAK,EACbuB,EAAQ2B,IAGNC,GAAU,SAACpD,EAAGC,GAChB,IAAIkD,EAAI,YAAOlE,GACfkE,EAAKnD,GAAGC,GAAK,EACbuB,EAAQ2B,IAGN/C,GAAO,SAACJ,EAAGC,GACb,IAAIkD,EAAI,YAAOlE,GACfkE,EAAKnD,GAAGC,GAAK,EACbuB,EAAQ2B,IAGNjF,GAAqB,WAGvB,IAFA,IAAIiF,EAAI,YAAOlE,GAENpC,EAAI,EAAGA,EAAImE,EAAGnE,IACnB,IAAK,IAAIkG,EAAI,EAAGA,EAAI9B,EAAG8B,IACA,IAAf9D,EAAKpC,GAAGkG,KACRI,EAAKtG,GAAGkG,GAAK,GAKzBvB,EAAQ2B,GACRb,GAASf,EAAWP,EAAGC,GAEvB,IAAK,IAAIpE,EAAI,EAAGA,EAAImE,EAAGnE,IACnB,IAAK,IAAIkG,EAAI,EAAGA,EAAI9B,EAAG8B,IACnBT,GAAOzF,GAAGkG,GAAK,CACXC,OAAQ,EACRC,OAAQ,GAIpBxB,GAAgB,GAChBG,EAAYD,KACZG,GAAW,IAGT1D,GAAsB,WAExB,IADA,IAAI+E,EAAI,YAAOlE,GACNpC,EAAI,EAAGA,EAAImE,EAAGnE,IACnB,IAAK,IAAIkG,EAAI,EAAGA,EAAI9B,EAAG8B,IACnBI,EAAKtG,GAAGkG,GAAK,EAGrBvB,EAAQ2B,GACRb,GAASf,EAAWP,EAAGC,GAEvB,IAAK,IAAIpE,EAAI,EAAGA,EAAImE,EAAGnE,IACnB,IAAK,IAAIkG,EAAI,EAAGA,EAAI9B,EAAG8B,IACnBT,GAAOzF,GAAGkG,GAAK,CACXC,OAAQ,EACRC,OAAQ,GAEZZ,GAAQxF,GAAGkG,GAAK,EAGxBtB,GAAgB,GAChBpB,GAAoB,GACpBuB,EAAYD,KACZG,GAAW,IAGf,SAASuB,GAAwBC,EAAGC,GAChC,IAAI5D,EAAIoC,KAAKC,MAAMD,KAAKyB,UAAUD,EAAED,GAAGA,GACvC,OAAG3D,EAAE,IAAI,EACEA,EAGJA,EAAE,GAAG4D,EAAU5D,EAAE,EACZA,EAAE,GAAG2D,EAAU3D,EAAE,OAApB,EAIb,SAAS8D,GAAuBH,EAAGC,GAC/B,IAAI5D,EAAIoC,KAAKC,MAAMD,KAAKyB,UAAUD,EAAED,GAAGA,GACvC,OAAK,EAAF3D,EACQA,EAGJA,EAAE,GAAG4D,EAAU5D,EAAE,EACZA,EAAE,GAAG2D,EAAU3D,EAAE,OAApB,EAIb,IAAMpB,GAAS,uCAAG,kDAAA+E,EAAA,sDACdzB,GAAW,GACP3B,IACGwB,EACCxD,KAGAE,MAGJsF,EAAK,IAAIjD,GACb4B,GAAO,YAAOpD,IACN5B,EAAIsC,GAAGtC,EAAIuC,GAAK,EACxB8D,EAAGC,QAAQ,CACPhE,EAAGtC,EAAIsC,EACPC,EAAGvC,EAAIuC,IAEPgE,EAAOrC,EAAWP,EAAGC,GACrB4C,GAAM,EAlBI,UAmBNH,EAAG5C,YAAqB,IAAR+C,EAnBV,iBAoBNC,EAAOJ,EAAGK,QACdL,EAAGM,UACMnH,EAAI,EAtBH,aAsBMA,EAAI,GAtBV,oBAuBFoH,EAAUH,EAAKnE,EAAIuB,EAAGrE,GACtBqH,EAAUJ,EAAKlE,EAAIuB,EAAGtE,KACtBoH,EAAU,GAAKA,GAAWhF,EAAKnC,QAzB7B,6DA0BFoH,EAAU,GAAKA,GAAWjF,EAAK,GAAGnC,QA1BhC,2DA2B4B,IAA9BuF,GAAQ4B,GAASC,KAAmBD,IAAYpE,GAAKF,GAAKuE,IAAYrE,GAAKD,GA3BzE,oBA4BFyC,GAAQ4B,GAASC,GAAW,EAC5BN,EAAKK,GAASC,GAAW,EAAIN,EAAKE,EAAKnE,GAAGmE,EAAKlE,GAC/C0C,GAAO2B,GAASC,GAASlB,MAAQc,EAAKnE,EACtC2C,GAAO2B,GAASC,GAASjB,MAAQa,EAAKlE,EAClCqE,IAAYpE,GAAKF,GAAKuE,IAAYrE,GAAKD,EAhCzC,wBAiCEiE,GAAM,EAjCR,oCAoCFX,GAAMe,EAASC,GApCb,UAqCI,IAAIC,SAAQ,SAAAnE,GAAC,OAAIoE,WAAWpE,EAAG,OArCnC,QAsCF0D,EAAGC,QAAQ,CACPhE,EAAGsE,EACHrE,EAAGsE,IAxCL,QAsBarH,IAtBb,kDA6CVwH,EAAS/B,GAAOzC,GAAKF,GAAGE,GAAKD,GAAGoD,MAChCsB,EAAShC,GAAOzC,GAAKF,GAAGE,GAAKD,GAAGqD,OACpB,IAAZoB,IAA6B,IAAZC,EA/CP,wBAgDVlC,IAAS,GAhDC,2BAoDVmC,EAAW,GApDD,WAsDNF,IAAWhH,EAAIsC,GAAK2E,IAAWjH,EAAIuC,EAtD7B,qDAuDV2E,EAAS1D,KAAK,CAAC2D,MAAOH,EAAQI,MAAOH,IACjCI,EAAML,EACVA,EAAS/B,GAAO+B,GAAQC,GAAQtB,MAChCsB,EAAShC,GAAOoC,GAAKJ,GAAQrB,MA1DnB,wBA4DdsB,EAASI,UACD9H,EAAE,EA7DI,aA6DDA,EAAE0H,EAASzH,QA7DV,wBA8DVsG,GAAQmB,EAAS1H,GAAG2H,MAAOD,EAAS1H,GAAG4H,OA9D7B,UA+DJ,IAAIN,SAAQ,SAAAnE,GAAC,OAAIoE,WAAWpE,EAAG,OA/D3B,QA6DiBnD,IA7DjB,wBAiEd4E,GAAgB,GAChBG,EAAYgC,EAAK/D,GAAKF,GAAGE,GAAKD,IAC9BiC,GAAW,GACXiB,KACAhB,GAAW,GArEG,4CAAH,qDAmdT/D,GAAwB,uCAAG,8BAAAuF,EAAA,sDAC7BzB,GAAW,IACPH,GAAoBxB,IACpB9B,KAGIvB,EAAE,EANmB,YAMjBA,EAAEmE,GANe,iBAOjB+B,EAAE,EAPe,YAObA,EAAE9B,GAPW,sBAQlBc,KAAKC,MAAoB,IAAdD,KAAKyB,WAAgB,IARd,wBASjBnB,GAAQxF,GAAGkG,GAAK,EAChB3C,GAAKvD,EAAEkG,GAVU,UAWX,IAAIoB,SAAQ,SAAAnE,GAAC,OAAIoE,WAAWpE,EAAG,OAXpB,QAOT+C,IAPS,uBAMblG,IANa,uBAe7BgF,GAAW,GACXiB,KACAzC,GAAoB,GAjBS,4CAAH,qDAgD9B,OACI,qCACA,cAAC,EAAD,CAAQhC,KAAQA,EAAMtC,WAnnBP,SAAC6I,GAChBvD,EAAQuD,IAmnBAtG,SAAaA,EAAWuG,eAhnBb,SAACD,GACpBtD,EAAYsD,IAgnBJrG,UAAaA,GACbC,UAhcM,WACdqD,GAAW,GACX,IAAIiD,GAAe,EACf5E,IACGwB,EACCxD,MAGA6G,QAAQC,IAAI,QACZ5G,OAKR,IAFA,IAAIwF,EAAOrC,EAAWP,EAAGC,GACrBgE,EAAQ,GACJpI,EAAE,EAAEA,EAAEmE,EAAEnE,IACZ,IAAI,IAAIkG,EAAE,EAAEA,EAAE9B,EAAE8B,IAAKV,GAAQxF,GAAGkG,GAAK9D,EAAKpC,GAAGkG,IAG/B,SAAZmC,EAAaV,EAAOC,GAEtB,GADApC,GAAQmC,GAAOC,GAAS,GACpBK,EACJ,IAAK,IAAIjI,EAAI,EAAGA,EAAI,EAAGA,IAAK,CACxB,IAAIoH,EAAUO,EAAQtD,EAAGrE,GACrBqH,EAAUO,EAAQtD,EAAGtE,GACzB,KAAIoH,EAAU,GAAKA,GAAWjD,OAC1BkD,EAAU,GAAKA,GAAWjD,KACI,IAA9BoB,GAAQ4B,GAASC,IAAmBD,IAAYpE,GAAKF,GAAKuE,IAAYrE,GAAKD,IAAI,CAI/E,GAHAgE,EAAKK,GAASC,GAAW,EAAIN,EAAKY,GAAOC,GACzCnC,GAAO2B,GAASC,GAASlB,MAAQwB,EACjClC,GAAO2B,GAASC,GAASjB,MAAQwB,EAC7BR,IAAYpE,GAAKF,GAAKuE,IAAYrE,GAAKD,EAEvC,YADAkF,GAAe,GAGnBG,EAAMpE,KAAK,CACPlB,EAAGsE,EACHrE,EAAGsE,IAEPgB,EAAUjB,EAASC,KAI/BgB,CAAU7H,EAAIsC,EAAGtC,EAAIuC,GACX,uCAAG,sCAAA0D,EAAA,sDACAzG,EAAI,EADJ,YACOA,EAAIoI,EAAMnI,QADjB,uBAELoG,GAAM+B,EAAMpI,GAAG8C,EAAGsF,EAAMpI,GAAG+C,GAFtB,SAGC,IAAIuE,SAAQ,SAAAnE,GAAC,OAAIoE,WAAWpE,EAAG,OAHhC,OACyBnD,IADzB,yBAKLwH,EAAS/B,GAAOzC,GAAKF,GAAGE,GAAKD,GAAGoD,MAChCsB,EAAShC,GAAOzC,GAAKF,GAAGE,GAAKD,GAAGqD,OACpB,IAAZoB,IAA6B,IAAZC,EAPZ,wBAQLlC,IAAS,GARJ,2BAWLmC,EAAW,GAXN,WAaDF,IAAWhH,EAAIsC,GAAK2E,IAAWjH,EAAIuC,EAblC,qDAcL2E,EAAS1D,KAAK,CAAC2D,MAAOH,EAAQI,MAAOH,IACjCI,EAAML,EACVA,EAAS/B,GAAO+B,GAAQC,GAAQtB,MAChCsB,EAAShC,GAAOoC,GAAKJ,GAAQrB,MAjBxB,wBAmBTsB,EAASI,UACD9H,EAAE,EApBD,aAoBIA,EAAE0H,EAASzH,QApBf,wBAqBLsG,GAAQmB,EAAS1H,GAAG2H,MAAOD,EAAS1H,GAAG4H,OArBlC,UAsBC,IAAIN,SAAQ,SAAAnE,GAAC,OAAIoE,WAAWpE,EAAG,OAtBhC,QAoBsBnD,IApBtB,wBAwBTiF,GAAW,GACXD,GAAW,GACXiB,KACAlB,EAAYgC,EAAK/D,GAAKF,GAAGE,GAAKD,IAC9B6B,EAAgB,GA5BP,4CAAH,oDA8BV0D,IAwXQvH,qBArXiB,WACzBiE,GAAW,IACPH,GAAoBxB,IACpB9B,KAEJ,IAAI6G,EAAQ,IACkB,SAAxBG,EAAyBC,EAAUC,EAAQC,EAAUC,EAAQC,EAAaC,GAC5E,KAAIJ,EAASD,GAAYG,EAASD,GAAlC,CAIA,IAAKG,EAAkB,CACnB,IAAK,IAAI1F,EAAI,EAAGA,EAAIgB,EAAGhB,IACnB,IAAK,IAAIC,EAAI,EAAGA,EAAIgB,EAAGhB,IACT,IAAND,GAAiB,IAANC,GAAiBe,KAANhB,GAAqBiB,KAANhB,IACrCgF,EAAMpE,KAAK,CACP2D,MAAOxE,EACPyE,MAAOxE,IAEXoC,GAAQrC,GAAGC,GAAK,GAI5ByF,GAAmB,EAGvB,GAAoB,eAAhBD,EAA8B,CAG9B,IAFA,IAAIE,EAAsBtC,GAAwBgC,EAAUC,GACxDM,EAAqBnC,GAAuB8B,EAAS,EAAGC,EAAO,GAC1D3I,EAAI0I,EAAW,EAAG1I,GAAK2I,EAAS,EAAG3I,IACpCA,IAAM+I,IACNX,EAAMpE,KAAK,CACP2D,MAAOmB,EACPlB,MAAO5H,IAEXwF,GAAQsD,GAAqB9I,GAAK,GAItCuI,EAAsBC,EAAUM,EAAsB,EAAGJ,EAAUC,EADnEG,EAAsB,EAAIN,EAAWG,EAASD,EAC6BE,EAGA,WAHaC,GAMxFN,EAAsBO,EAAsB,EAAGL,EAAQC,EAAUC,EADjEF,GAAUK,EAAsB,GAAKH,EAASD,EAC2BE,EAGA,WAHaC,OAMzF,CAGD,IAFA,IAAIG,EAAsBxC,GAAwBkC,EAAUC,GACxDM,EAAqBrC,GAAuB4B,EAAS,EAAGC,EAAO,GAC1DzI,EAAIwI,EAAW,EAAGxI,GAAKyI,EAAS,EAAGzI,IACpCA,IAAMiJ,IACNb,EAAMpE,KAAK,CACP2D,MAAO3H,EACP4H,MAAOoB,IAEXxD,GAAQxF,GAAGgJ,GAAuB,GAItCT,EAAsBC,EAAUC,EAAQC,EAAUM,EAAsB,EADxEP,EAASD,EAAWQ,EAAsB,EAAIN,EAC6B,aAGAE,EAHcC,GAMzFN,EAAsBC,EAAUC,EAAQO,EAAsB,EAAGL,EADjEF,EAASD,EAAWG,GAAUK,EAAsB,GACqB,aAGAJ,EAHcC,KAOnGN,CAAsB,EAAGpE,GAAO,EAAGC,GAAO,cAAc,GAC9C,uCAAG,4BAAAqC,EAAA,sDACAzG,EAAI,EADJ,YACOA,EAAIoI,EAAMnI,QADjB,uBAELsD,GAAK6E,EAAMpI,GAAG2H,MAAOS,EAAMpI,GAAG4H,OAFzB,SAGC,IAAIN,SAAQ,SAAAnE,GAAC,OAAIoE,WAAWpE,EAAG,OAHhC,OACyBnD,IADzB,sBAKTgF,GAAW,GACXiB,KACAzC,GAAoB,GAPX,4CAAH,oDASV8E,IA+RQrH,qBA5RiB,WAEzB+D,GAAW,IACPH,GAAoBxB,IACpB9B,KAEJ,IAAI6G,EAAQ,IACW,SAAjBc,EAAkBV,EAAUC,EAAQC,EAAUC,EAAQC,EAAaC,GACrE,KAAIJ,EAASD,GAAYG,EAASD,GAAlC,CAIA,IAAKG,EAAkB,CACnB,IAAK,IAAI1F,EAAI,EAAGA,EAAIgB,EAAGhB,IACnB,IAAK,IAAIC,EAAI,EAAGA,EAAIgB,EAAGhB,IACT,IAAND,GAAiB,IAANC,GAAiBe,KAANhB,GAAqBiB,KAANhB,IACrCgF,EAAMpE,KAAK,CACP2D,MAAOxE,EACPyE,MAAOxE,IAEXoC,GAAQrC,GAAGC,GAAK,GAI5ByF,GAAmB,EAGvB,GAAoB,eAAhBD,EAA8B,CAG9B,IAFA,IAAIE,EAAsBtC,GAAwBgC,EAAUC,GACxDM,EAAqBnC,GAAuB8B,EAAS,EAAGC,EAAO,GAC1D3I,EAAI0I,EAAW,EAAG1I,GAAK2I,EAAS,EAAG3I,IACpCA,IAAM+I,IACNX,EAAMpE,KAAK,CACP2D,MAAOmB,EACPlB,MAAO5H,IAEXwF,GAAQsD,GAAqB9I,GAAK,GAG1C,IAAImJ,EAAajE,KAAKC,MAAoB,IAAdD,KAAKyB,UAE7BuC,EAAeV,EAAUM,EAAsB,EAAGJ,EAAUC,EAD5DG,EAAsB,EAAIN,EAAWG,EAASD,EACsBE,EAGjEO,GA3CA,GA4CqE,WAGAP,EAPSC,GAWjFK,EAAeJ,EAAsB,EAAGL,EAAQC,EAAUC,EAD1DF,GAAUK,EAAsB,GAAKH,EAASD,EACoBE,EAG/DO,GAtDA,GAuDmE,WAGAP,EAPSC,OAWlF,CAGD,IAFA,IAAIG,EAAsBxC,GAAwBkC,EAAUC,GACxDM,EAAqBrC,GAAuB4B,EAAS,EAAGC,EAAO,GAC1DzI,EAAIwI,EAAW,EAAGxI,GAAKyI,EAAS,EAAGzI,IACpCA,IAAMiJ,IACNb,EAAMpE,KAAK,CACP2D,MAAO3H,EACP4H,MAAOoB,IAEXxD,GAAQxF,GAAGgJ,GAAuB,GAG1C,IAAIG,EAAajE,KAAKC,MAAoB,IAAdD,KAAKyB,UAE7BuC,EAAeV,EAAUC,EAAQC,EAAUM,EAAsB,EADjEP,EAASD,EAAWQ,EAAsB,EAAIN,EACsB,aAIjES,GAhFA,GAiFqEP,EAGA,aARUC,GAYlFK,EAAeV,EAAUC,EAAQO,EAAsB,EAAGL,EAD1DF,EAASD,EAAWG,GAAUK,EAAsB,GACc,aAG/DG,GA3FA,GA4FmEP,EAGA,aAPUC,KAY5FK,CAAe,EAAG/E,GAAO,EAAGC,GAAO,cAAc,GACvC,uCAAG,4BAAAqC,EAAA,sDACAzG,EAAI,EADJ,YACOA,EAAIoI,EAAMnI,QADjB,uBAELsD,GAAK6E,EAAMpI,GAAG2H,MAAOS,EAAMpI,GAAG4H,OAFzB,SAGC,IAAIN,SAAQ,SAAAnE,GAAC,OAAIoE,WAAWpE,EAAG,OAHhC,OACyBnD,IADzB,sBAKTgF,GAAW,GACXiB,KACAzC,GAAoB,GAPX,4CAAH,oDASV8E,IA8KQtH,mBA3Ke,WAEvBgE,GAAW,IACPH,GAAoBxB,IACpB9B,KAEJ,IAAI6G,EAAQ,IACS,SAAfgB,EAAgBZ,EAAUC,EAAQC,EAAUC,EAAQC,EAAaC,GACnE,KAAIJ,EAASD,GAAYG,EAASD,GAAlC,CAIA,IAAKG,EAAkB,CACnB,IAAK,IAAI1F,EAAI,EAAGA,EAAIgB,EAAGhB,IACnB,IAAK,IAAIC,EAAI,EAAGA,EAAIgB,EAAGhB,IACT,IAAND,GAAiB,IAANC,GAAiBe,KAANhB,GAAqBiB,KAANhB,IACrCgF,EAAMpE,KAAK,CACP2D,MAAOxE,EACPyE,MAAOxE,IAEXoC,GAAQrC,GAAGC,GAAK,GAI5ByF,GAAmB,EAGvB,GAAoB,eAAhBD,EAA8B,CAG9B,IAFA,IAAIE,EAAsBtC,GAAwBgC,EAAUC,GACxDM,EAAqBnC,GAAuB8B,EAAS,EAAGC,EAAO,GAC1D3I,EAAI0I,EAAW,EAAG1I,GAAK2I,EAAS,EAAG3I,IACpCA,IAAM+I,IACNX,EAAMpE,KAAK,CACP2D,MAAOmB,EACPlB,MAAO5H,IAEXwF,GAAQsD,GAAqB9I,GAAK,GAG1C,IAAImJ,EAAajE,KAAKC,MAAoB,IAAdD,KAAKyB,UAGzByC,EAAaZ,EAAUM,EAAsB,EAAGJ,EAAUC,EAF9DG,EAAsB,EAAIN,EAAWG,EAASD,GAC3CS,GAxCA,GAyCmEP,EAOJ,WAPiBC,GAW/EO,EAAaN,EAAsB,EAAGL,EAAQC,EAAUC,EAF5DF,GAAUK,EAAsB,GAAKH,EAASD,GAC3CS,GAnDA,GAoDiEP,EAOJ,WAPiBC,OAUpF,CAGD,IAFA,IAAIG,EAAsBxC,GAAwBkC,EAAUC,GACxDM,EAAqBrC,GAAuB4B,EAAS,EAAGC,EAAO,GAC1DzI,EAAIwI,EAAW,EAAGxI,GAAKyI,EAAS,EAAGzI,IACpCA,IAAMiJ,IACNb,EAAMpE,KAAK,CACP2D,MAAO3H,EACP4H,MAAOoB,IAEXxD,GAAQxF,GAAGgJ,GAAuB,GAG1C,IAAIG,EAAajE,KAAKC,MAAoB,IAAdD,KAAKyB,UAGzByC,EAAaZ,EAAUC,EAAQC,EAAUM,EAAsB,EAFnEP,EAASD,EAAWQ,EAAsB,EAAIN,GAC3CS,GA5EA,GA6EmE,aAOJP,EAPkBC,GAWhFO,EAAaZ,EAAUC,EAAQO,EAAsB,EAAGL,EAF5DF,EAASD,EAAWG,GAAUK,EAAsB,IACjDG,GAvFA,GAwFiE,aAOJP,EAPkBC,KAa9FO,CAAa,EAAGjF,GAAO,EAAGC,GAAO,YAAY,GACnC,uCAAG,4BAAAqC,EAAA,sDACAzG,EAAI,EADJ,YACOA,EAAIoI,EAAMnI,QADjB,uBAELsD,GAAK6E,EAAMpI,GAAG2H,MAAOS,EAAMpI,GAAG4H,OAFzB,SAGC,IAAIN,SAAQ,SAAAnE,GAAC,OAAIoE,WAAWpE,EAAG,OAHhC,OACyBnD,IADzB,sBAKTgF,GAAW,GACXiB,KACAzC,GAAoB,GAPX,4CAAH,oDASV8E,IA4DQpH,yBAA4BA,GAC5BG,mBAAsBA,GACtBE,oBAAuBA,KAG7B+D,IACE,sBAAKhF,UAAU,YAAf,UACI,qBAAKE,IAAK6I,EAAc3I,IAAI,eAAeC,OAAO,SAClD,mBAAGL,UAAU,iBAAb,4BACA,wBAAQA,UAAU,KAAKO,QA9Cb,WAClB,IAAI6E,EAAUtG,SAASC,eAAe,KAClCsG,EAAUvG,SAASC,eAAe,KAClC0G,EAAU3G,SAASC,eAAe,KAClC2G,EAAU5G,SAASC,eAAe,KAClCuG,EAAUxG,SAASC,eAAe,KAEtCqG,EAAQG,UAAW,EACnBH,EAAQpF,UAAY,aAEpBqF,EAAQE,UAAW,EACnBF,EAAQrF,UAAY,aAEpByF,EAAQzF,UAAY,YACpByF,EAAQF,UAAW,EAEnBG,EAAQ1F,UAAY,YACpB0F,EAAQH,UAAW,EAEnBD,EAAQC,UAAW,EACnBD,EAAQtF,UAAY,SACpBsF,EAAQtG,YAAc,YACtBiG,IAAS,GACT/B,GAAoB,GACpBoB,GAAgB,GAChBI,GAAW,IAqBH,mBAIR,cAAC,EAAD,CAAM5C,KAAQA,EAAMuC,QAAWA,EACzBxC,SAAYA,EAAU4C,YAAeA,EACrC7C,QAAWA,EAAS+C,WAAcA,EAClC1B,KAAQA,GACRF,aAAgBA,EAChBC,QAAWA,EACX9C,IAAMA,EAAK4E,OAAUA,EACrBpC,KAAQA,GAAMqC,QAAWA,GACzB7B,oBAAuBA,IAE7B,cAAC,EAAD,OAKR,IAAIkB,EAAa,SAACpC,EAAKgH,GAEnB,IADA,IAAIC,EAAQ,IAAIC,MAAMlH,GACbtC,EAAI,EAAGA,EAAIsC,EAAKtC,IAAK,CAC1BuJ,EAAMvJ,GAAK,IAAIwJ,MAAMF,GACrB,IAAK,IAAIpD,EAAI,EAAGA,EAAIoD,EAAKpD,IAAKqD,EAAMvJ,GAAGkG,GAAK,EAEhD,OAAOqD,GC/vBI,MAA0B,gC,aCM1B,SAASE,IACpB,IAAIC,EAAUC,cAId,OACI,sBAAKrJ,UAAU,MAAf,UACI,qBAAKE,IAAKoJ,EAAWlJ,IAAI,GAAGC,OAAO,UACnC,wBAAQL,UAAU,eAAeO,QAAS,WAL9C6I,EAAQ1F,KAAK,gBAKT,qB,UCdG,MAA0B,kCCA1B,MAA0B,mCCA1B,MAA0B,mCCA1B,MAA0B,iCCQ1B,SAAS6F,IAAY,IAAD,EACM/H,mBAAS,GADf,mBACxBgI,EADwB,KACZC,EADY,KAEzBL,EAAUC,cAEVK,EAAiB,SAACC,GACpBF,EAAcE,EAAY,GACR,IAAfH,GACCJ,EAAQ1F,KAAK,gBAIfkG,EAAiB,WACnBR,EAAQ1F,KAAK,gBAGjB,OACI,qCACgB,IAAf8F,GACG,sBAAKxJ,UAAU,aAAf,UACI,sBAAKA,UAAU,UAAf,UACI,oBAAGA,UAAU,OAAb,iBACQ,uBADR,cAEe,0BAEf,mBAAGA,UAAU,YAAb,4BAGJ,sBAAKA,UAAU,UAAf,UACI,wBAAQA,UAAU,OAAOO,QAAS,kBAAMqJ,KAAxC,kBACA,wBAAQ5J,UAAU,OAAOO,QAAS,kBAAMmJ,EAAeF,IAAvD,wBAKI,IAAfA,GACG,sBAAKxJ,UAAU,aAAf,UACI,sBAAKA,UAAU,YAAf,UACI,sBAAKA,UAAU,OAAf,UACI,mBAAGA,UAAU,YAAb,+BACA,oBAAGA,UAAU,MAAb,kCACyB,uBADzB,wBAIA,oBAAGA,UAAY,WAAf,+CACsC,uBADtC,gCAEiC,uBAFjC,sCAGuC,uBAHvC,uBAQJ,sBAAKA,UAAU,WAAf,UACI,oBAAGA,UAAU,YAAb,4BAAwC,uBAAxC,aACU,0BAEV,oBAAGA,UAAU,MAAb,gCACuB,uBADvB,mBAEoB,uBAFpB,iBAGkB,uBAHlB,eAIgB,uBAJhB,2BAK4B,gCAIpC,sBAAKA,UAAU,UAAf,UACI,wBAAQA,UAAU,OAAOO,QAAS,kBAAMqJ,KAAxC,kBACA,wBAAQ5J,UAAU,OAAOO,QAAS,kBAAMmJ,EAAeF,IAAvD,wBAKI,IAAfA,GACG,sBAAKxJ,UAAU,aAAf,UACI,sBAAKA,UAAU,OAAf,UACI,sBAAKA,UAAU,QAAf,UACI,qBAAKE,IAAK2J,EAAQzJ,IAAI,SAASC,OAAO,SACtC,qBAAKH,IAAKwC,EAAMtC,IAAI,OAAOC,OAAO,SAClC,qBAAKL,UAAU,aAAf,SACI,qBAAKE,IAAKc,EAAOZ,IAAI,QAAQC,OAAO,WAExC,qBAAKL,UAAU,qBAAf,SACI,qBAAKE,IAAKc,EAAOZ,IAAI,QAAQC,OAAO,WAExC,qBAAKL,UAAU,aAAf,SACI,qBAAKE,IAAK4J,EAAQ1J,IAAI,SAASC,OAAO,WAE1C,qBAAKL,UAAU,qBAAf,SACI,qBAAKE,IAAK4J,EAAQ1J,IAAI,SAASC,OAAO,cAI9C,sBAAKL,UAAU,OAAf,UACI,mBAAGA,UAAU,OAAb,sBACA,mBAAGA,UAAU,OAAb,2BACA,mBAAGA,UAAU,OAAb,sCACA,mBAAGA,UAAU,OAAb,iCACA,mBAAGA,UAAU,OAAb,wCACA,mBAAGA,UAAU,OAAb,uCAGR,sBAAKA,UAAU,UAAf,UACI,wBAAQA,UAAU,OAAOO,QAAS,kBAAMqJ,KAAxC,kBACA,wBAAQ5J,UAAU,OAAOO,QAAS,kBAAMmJ,EAAeF,IAAvD,2BCnFLO,MArBf,WAEE,OACE,cAAC,IAAD,UACE,qBAAK/J,UAAU,MAAf,SACI,eAAC,IAAD,WACE,cAAC,IAAD,CAAOgK,OAAK,EAACC,KAAM,IAAnB,SACE,cAAC,EAAD,MAEF,cAAC,IAAD,CAAOA,KAAM,cAAb,SACE,cAAC,EAAD,MAEF,cAAC,IAAD,CAAOA,KAAM,IAAb,SACE,cAAC,EAAD,cCPCC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEF/L,SAASC,eAAe,SAM1BmL,M","file":"static/js/main.5a3a12fb.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/page-not-found.1c9b6496.svg\";","export default __webpack_public_path__ + \"static/media/logo.3ac45227.svg\";","export default __webpack_public_path__ + \"static/media/trash.540f600c.svg\";","export default __webpack_public_path__ + \"static/media/rubber.e3ff2ccc.svg\";","import logo from './logo.svg';\nimport trash from './trash.svg';\nimport eraser from './rubber.svg';\nimport {Link} from 'react-router-dom';\nimport './Navbar.css'\n\nexport default function Navbar(props) {\n    \n    const handleChangeAlgo = (algorithm) => {\n        props.changeAlgo(algorithm);\n        var changeButton = document.getElementById('5');\n        \n        changeButton.textContent = \"Visualize \"  + algorithm;  \n        if(changeButton.style.width !== '120px'){\n            changeButton.style.width = '160px';\n        }\n    }\n\n    const handleVisualize = () => {\n        if(props.algo === '' && props.mazeAlgo === ''){\n            var changeButton = document.getElementById('5');\n            changeButton.textContent = \"Select an Algorithm !\";\n            changeButton.style.width = '220px';\n        }\n        else{\n            if(props.algo === 'BFS'){\n                props.handleBFS();\n            }\n            else if(props.algo === 'DFS'){\n                props.handleDFS();\n            }\n            else if(props.algo === 'Astar'){\n                props.handleDFS();\n            }\n        }       \n    }\n    \n    window.onclick = function(event) {\n        if (!event.target.matches('.algobutton')) {\n            var dropdowns = document.getElementsByClassName(\"algorithms\");\n            for (let i = 0; i < dropdowns.length; i++) {\n                var openDropdown = dropdowns[i];\n                if (openDropdown.classList.contains('show')) {\n                    openDropdown.classList.remove('show');\n                }\n            }\n        }\n        if (!event.target.matches('.mazebutton')) {\n            dropdowns = document.getElementsByClassName(\"maze-algorithms\");\n            for (let i = 0; i < dropdowns.length; i++) {\n                openDropdown = dropdowns[i];\n                if (openDropdown.classList.contains('show')) {\n                    openDropdown.classList.remove('show');\n                }\n            }\n        }\n    }\n   \n    const handleClickAlgo = () => {\n        document.getElementById('algo').classList.toggle(\"show\");\n    }\n\n    const handleClickMaze = () => {\n        document.getElementById('mazealgo').classList.toggle(\"show\");\n    }\n\n    return (\n        <>\n        <nav className=\"dropdown\">\n            <div className=\"logo\">\n                <Link to=\"/\">\n                    <img src={logo} alt=\"logo\"  height=\"50px\"/>\n                </Link>\n            </div>\n            <h1 className=\"title\">Path Finder</h1>\n            <div className = \"Algorithms\">\n                <button className=\"algobutton\" id='1' onClick = {() => handleClickAlgo()}> Algorithms </button>\n                \n                <ul className = \"algorithms\" id='algo'>\n                    <li className = \"bfs\" onClick = {() => handleChangeAlgo(\"BFS\")}>Breadth First Search</li>\n                    <li className = \"dfs\" onClick = {() => handleChangeAlgo(\"DFS\")}>Depth First Search</li>\n                </ul>\n            </div>\n \n            <div className = \"MazeAlgorithms\">\n                <button className=\"mazebutton\" id='2' onClick = {() => handleClickMaze()}>Maze Algorithms</button >\n                <ul className = \"maze-algorithms\" id='mazealgo'>\n                    <li className = \"rd\" onClick = {() => props.handleMazeGeneration()}>Recursive Division</li>\n                    <li className = \"vs\" onClick = {() => props.handleVerticalSkew()}>Vertical Skew</li>\n                    <li className = \"hs\" onClick = {() => props.handleHorizontalSkew()}>Horizontal Skew</li>\n                    <li className = \"rm\" onClick = {() => props.handleRandomMazeGenerate()}>Random Maze</li>\n                </ul>\n            </div>\n            <div className=\"infos\" id='info'>\n                <input type=\"image\" src={eraser} alt=\"eraser\" height = \"25px\" className = \"info-disabled-path\" id='3' onClick={() => props.handleVisitedReset()}></input>\n                <input type=\"image\" src={trash} alt=\"trash\" height = \"25px\" className = \"info-disabled\" id='4' onClick={() => props.handleCompleteReset()}></input>\n            </div>\n            <button className = \"visual\" onClick = {() => handleVisualize()} id='5'>Visualize</button>\n        </nav>\n        </>\n    )\n}","import { useState } from 'react';\nimport './Grid.css'\n\nexport default function Grid(props) {   \n    const [hold, setHold] = useState(false);\n\n    const getCellType = (visit, rowInd, colInd) => {\n        var cellType = 'cell';\n        if (rowInd === props.src.x && colInd === props.src.y) {\n            cellType = 'source';\n        } \n        else if(rowInd === props.dest.x && colInd === props.dest.y){\n            cellType = 'dest';\n        }\n        else if (visit[rowInd][colInd] === 1) {\n            cellType = 'visited';\n        } else if (visit[rowInd][colInd] === 2) {\n            cellType = 'retrack';\n        } else if (visit[rowInd][colInd] === 3) {\n            cellType = 'wall';\n        }\n        return cellType;\n    }\n\n    const handleClickOnGrid = (r,c) => {\n        let cell = document.getElementById(r + \"-\" + c);\n        if(cell && !props.isVisualised && !props.running && hold) {\n            props.wall(r,c);\n            props.setIsMazeVisualised(true);\n        }\n    }\n\n    const handleToggle = () => setHold(!hold);\n\n    return (\n        <div className=\"mainGrid\">\n            <h2 className=\"distance\">Distance : {(props.reached===true?props.distance:'∞')} </h2>\n            <div className=\"grids\">\n            {props.grid.map((row, rowIdx) => (\n            <div id={rowIdx} className=\"row\">\n                {row.map((cellValue, cellIdx) => {\n                const cellType = getCellType(\n                    props.grid,\n                    rowIdx,\n                    cellIdx\n                );\n                return <div className={cellType} id={rowIdx +\"-\" +cellIdx} onClick={handleToggle} onMouseOver={() => handleClickOnGrid(rowIdx, cellIdx)}> </div>;\n                    \n                })}\n            </div>\n            ))}\n            </div>\n        </div>\n    )\n}\n\n\n","export default __webpack_public_path__ + \"static/media/github.1d30516a.svg\";","import React from 'react'\nimport './Footer.css'\nimport github from './github.svg';\n\nexport default function Footer() {\n    return (\n        <div className = \"footer\">\n            <a href=\"https://github.com/Jintumoni/Path-Finding-Visualizer\">\n                <img src={github} height=\"25px\" alt=\"github\"></img> \n            </a>\n            <h3 className = \"content\"> Created by Jintu Kalita</h3>\n        </div>\n    )\n}\n","class Queue \n{ \n    constructor() \n    { \n        this.items = []; \n    } \n                  \n    enqueue(element) {\n        this.items.push(element);\n    }\n    dequeue() {\n        if (this.isEmpty())\n            return \"Underflow\";\n        return this.items.shift();\n    }\n    front() {\n        if (this.isEmpty())\n            return \"No elements in Queue\";\n        return this.items[0];\n    }\n    isEmpty() {\n        return this.items.length === 0;\n    }\n} \nexport default Queue;\n  ","import React from 'react'\nimport { useState } from 'react';\nimport pageNotFound from './page-not-found.svg';\nimport Navbar from '../Navbar/Navbar';\nimport Grid from '../Grid/Grid';\nimport Footer from '../Footer/Footer'\nimport Queue from '../queue';\nimport './Main.css'\n\nconst n = 23, m = 50;\n\nconst dx = [0, 0, 1, -1];\nconst dy = [1, -1, 0, 0];\n\nexport default function Main() {\n    // properites of navbar\n\n    const [algo, setAlgo] = useState('');\n    const [mazeAlgo, setMazeAlgo] = useState('');\n\n    //properties of the grid\n\n    const [grid, setGrid] = useState(createGrid(n, m));\n    const [isVisualised, setIsVisualised] = useState(false);\n    const [isMazeVisualised, setIsMazeVisualised] = useState(false);\n    const [distance, setDistance] = useState(Infinity);\n    const [running, setRunning] = useState(false);\n    const [reached, setReached] = useState(false);\n    const [src, setSrc] = useState({x: Math.floor(n/2), y: 3});\n    const [dest, setDest] = useState({x: Math.floor(n/2), y: m-4});\n    const [alert, setAlert] = useState(false);\n\n    var visited = createGrid(n, m);\n    var parent = createGrid(n, m);\n\n\n    if(running){\n        let button1 = document.getElementById('1');\n        let button2 = document.getElementById('2');\n        let button5 = document.getElementById('5');\n\n        button1.disabled = true;\n        button1.removeAttribute('algobutton');\n        button1.className = 'buttonDisabled'\n    \n        button2.disabled = true;\n        button2.removeAttribute('mazebutton');\n        button2.className = 'buttonDisabled'\n       \n        button5.disabled = true;\n        button5.textContent = \"Locked !\"\n        button5.removeAttribute('visual');\n        button5.className = 'disabled'\n    }\n\n    if(isVisualised){\n        let button3 = document.getElementById('3');\n        button3.className = 'pathReset';\n        button3.disabled = false;\n    }\n    else{\n        let button3 = document.getElementById('3');\n        if(button3) {\n            button3.removeAttribute('pathReset');\n            button3.className = 'info-disabled-path';\n            button3.disabled = true;\n        }\n    }\n   \n    if(isMazeVisualised && running === false){\n        let button4 = document.getElementById('4');\n        button4.className = 'gridReset'\n        button4.disabled = false;\n    }\n    else{\n        let button4 = document.getElementById('4');\n        if(button4) {\n            button4.removeAttribute('gridReset');\n            button4.className = 'info-disabled';\n            button4.disabled = true;\n        }\n    } \n\n    const restore_buttons = () => {\n        var button1 = document.getElementById('1');\n        var button2 = document.getElementById('2');\n        var button5 = document.getElementById('5');\n        \n        button1.disabled = false;\n        button1.className = 'algobutton'\n\n        button2.disabled = false;\n        button2.className = 'mazebutton'\n     \n        button5.disabled = false;\n        button5.className = 'visual';\n        button5.textContent = \"Visualize\"\n    }\n      \n    const changeAlgo = (newAlgo) => {\n        setAlgo(newAlgo);\n    }\n\n    const changeMazeAlgo = (newAlgo) => {\n        setMazeAlgo(newAlgo);\n    }\n\n\n    for (let i = 0; i < n; i++) {\n        for (let j = 0; j < m; j++) {\n            parent[i][j] = {\n                par_x: -1,\n                par_y: -1\n            };\n        }\n    }\n\n    const color = (r, c) => {\n        var copy = [...grid];\n        copy[r][c] = 1;\n        setGrid(copy);\n    }\n\n    const retrack = (r, c) => {\n        var copy = [...grid];\n        copy[r][c] = 2;\n        setGrid(copy);\n    }\n\n    const wall = (r, c) => {\n        var copy = [...grid];\n        copy[r][c] = 3;\n        setGrid(copy);\n    }\n\n    const handleVisitedReset = function () {\n        var copy = [...grid];\n       \n        for (let i = 0; i < n; i++) {\n            for (let j = 0; j < m; j++) {\n                if (grid[i][j] !== 3) {\n                    copy[i][j] = 0;\n                }\n            }\n        }\n\n        setGrid(copy);\n        parent = createGrid(n, m);\n\n        for (let i = 0; i < n; i++) {\n            for (let j = 0; j < m; j++) {\n                parent[i][j] = {\n                    par_x: -1,\n                    par_y: -1\n                };\n            }\n        }\n        setIsVisualised(false);\n        setDistance(Infinity);\n        setReached(false);\n    }\n\n    const handleCompleteReset = function () {\n        var copy = [...grid];\n        for (let i = 0; i < n; i++) {\n            for (let j = 0; j < m; j++) {\n                copy[i][j] = 0;\n            }\n        }\n        setGrid(copy);\n        parent = createGrid(n, m);\n\n        for (let i = 0; i < n; i++) {\n            for (let j = 0; j < m; j++) {\n                parent[i][j] = {\n                    par_x: -1,\n                    par_y: -1\n                };\n                visited[i][j] = 0;\n            }\n        }\n        setIsVisualised(false);\n        setIsMazeVisualised(false);\n        setDistance(Infinity);\n        setReached(false);\n    }\n\n    function evenRandomNumberInRange(a, b) {\n        var x = Math.floor(Math.random()*(b-a)+a);\n        if(x%2===0){\n            return x;\n        }\n        else{\n            if(x+1<=b) return x+1;\n            else if(x-1>=a) return x-1;\n        }\n    }\n\n    function oddRandomNumberInRange(a, b) {\n        var x = Math.floor(Math.random()*(b-a)+a);\n        if(x&1){\n            return x;\n        }\n        else{\n            if(x+1<=b) return x+1;\n            else if(x-1>=a) return x-1;\n        }\n    }\n\n    const handleBFS = async () => {\n        setRunning(true);\n        if (isVisualised) {\n            if(isMazeVisualised){\n                handleVisitedReset();\n            }\n            else{\n                handleCompleteReset();\n            }\n        }\n        var qu = new Queue();\n        visited = [...grid];\n        visited[src.x][src.y] = 1;\n        qu.enqueue({\n            x: src.x,\n            y: src.y\n        });\n        var dist = createGrid(n, m);\n        var got = false;\n        while (!qu.isEmpty() && got === false) {\n            let node = qu.front();\n            qu.dequeue();\n            for (let i = 0; i < 4; i++) {\n                let child_x = node.x + dx[i];\n                let child_y = node.y + dy[i];\n                if (child_x < 0 || child_x >= grid.length) continue;\n                if (child_y < 0 || child_y >= grid[0].length) continue;\n                if (visited[child_x][child_y] === 0 || (child_x === dest.x && child_y === dest.y)) {\n                    visited[child_x][child_y] = 1;\n                    dist[child_x][child_y] = 1 + dist[node.x][node.y];\n                    parent[child_x][child_y].par_x = node.x;\n                    parent[child_x][child_y].par_y = node.y;\n                    if (child_x === dest.x && child_y === dest.y) {\n                        got = true;\n                        break;\n                    }\n                    color(child_x, child_y);\n                    await new Promise(r => setTimeout(r, 10));\n                    qu.enqueue({\n                        x: child_x,\n                        y: child_y\n                    });\n                }\n            }\n        }\n        var curr_x = parent[dest.x][dest.y].par_x;\n        var curr_y = parent[dest.x][dest.y].par_y;\n        if (curr_x === -1 && curr_y === -1) {\n            setAlert(true);\n            return;\n        }\n       \n        var rev_path = [];\n        while (true) {\n            if (curr_x === src.x && curr_y === src.y) break;\n            rev_path.push({x_cor: curr_x, y_cor: curr_y});\n            let tmp = curr_x;\n            curr_x = parent[curr_x][curr_y].par_x;\n            curr_y = parent[tmp][curr_y].par_y;\n        }\n        rev_path.reverse();\n        for(var i=0; i<rev_path.length;i++){\n            retrack(rev_path[i].x_cor, rev_path[i].y_cor);\n            await new Promise(r => setTimeout(r, 20));\n        }\n        setIsVisualised(true);\n        setDistance(dist[dest.x][dest.y]);\n        setRunning(false);\n        restore_buttons();\n        setReached(true);\n    }\n\n    const handleDFS = () => {\n        setRunning(true);\n        var obtainedPath = false;\n        if (isVisualised) {\n            if(isMazeVisualised){\n                handleVisitedReset();\n            }\n            else{\n                console.log(\"else\");\n                handleCompleteReset();\n            }\n        }\n        var dist = createGrid(n, m);\n        var paths = [];\n        for(var i=0;i<n;i++){\n            for(var j=0;j<m;j++) visited[i][j] = grid[i][j];\n        }\n        \n        const DFShelper = (x_cor, y_cor) => {\n            visited[x_cor][y_cor] = 1;\n            if (obtainedPath) return;\n            for (let i = 0; i < 4; i++) {\n                let child_x = x_cor + dx[i];\n                let child_y = y_cor + dy[i];\n                if (child_x < 0 || child_x >= n) continue;\n                if (child_y < 0 || child_y >= m) continue;\n                if (visited[child_x][child_y] === 0 || (child_x === dest.x && child_y === dest.y)) {\n                    dist[child_x][child_y] = 1 + dist[x_cor][y_cor];\n                    parent[child_x][child_y].par_x = x_cor;\n                    parent[child_x][child_y].par_y = y_cor;\n                    if (child_x === dest.x && child_y === dest.y) {\n                        obtainedPath = true;\n                        return;\n                    }\n                    paths.push({\n                        x: child_x,\n                        y: child_y\n                    });\n                    DFShelper(child_x, child_y);\n                }\n            }\n        }\n        DFShelper(src.x, src.y);\n        const show = async () => {\n            for (let i = 0; i < paths.length; i++) {\n                color(paths[i].x, paths[i].y);\n                await new Promise(r => setTimeout(r, 10));\n            }\n            var curr_x = parent[dest.x][dest.y].par_x;\n            var curr_y = parent[dest.x][dest.y].par_y;\n            if (curr_x === -1 && curr_y === -1) {\n                setAlert(true);\n                return;\n            }\n            var rev_path = [];\n            while (true) {\n                if (curr_x === src.x && curr_y === src.y) break;\n                rev_path.push({x_cor: curr_x, y_cor: curr_y});\n                let tmp = curr_x;\n                curr_x = parent[curr_x][curr_y].par_x;\n                curr_y = parent[tmp][curr_y].par_y;\n            }\n            rev_path.reverse();\n            for(let i=0; i<rev_path.length;i++){\n                retrack(rev_path[i].x_cor, rev_path[i].y_cor);\n                await new Promise(r => setTimeout(r, 20));\n            }\n            setReached(true);\n            setRunning(false);\n            restore_buttons();\n            setDistance(dist[dest.x][dest.y]);\n            setIsVisualised(1);\n        }\n        show();\n    }\n\n    const handleMazeGeneration = () => {\n        setRunning(true);\n        if (isMazeVisualised || isVisualised) {\n            handleCompleteReset();\n        }\n        var paths = [];\n        const recursiveDivisionMaze = (rowStart, rowEnd, colStart, colEnd, orientation, surroundingWalls) => {\n            if (rowEnd < rowStart || colEnd < colStart) {\n                return;\n            }\n\n            if (!surroundingWalls) {\n                for (let r = 0; r < n; r++) {\n                    for (let c = 0; c < m; c++) {\n                        if (r === 0 || c === 0 || r === n - 1 || c === m - 1) {\n                            paths.push({\n                                x_cor: r,\n                                y_cor: c\n                            });\n                            visited[r][c] = 3;\n                        }\n                    }\n                }\n                surroundingWalls = true;\n            }\n\n            if (orientation === \"horizontal\") {\n                let rowSelectedForWalls = evenRandomNumberInRange(rowStart, rowEnd);\n                let colSelectedForHole = oddRandomNumberInRange(colStart-1, colEnd+1);\n                for (let i = colStart - 1; i <= colEnd + 1; i++) {\n                    if (i !== colSelectedForHole) {\n                        paths.push({\n                            x_cor: rowSelectedForWalls,\n                            y_cor: i\n                        });\n                        visited[rowSelectedForWalls][i] = 3\n                    }\n                }\n                if (rowSelectedForWalls - 2 - rowStart > colEnd - colStart) {\n                    recursiveDivisionMaze(rowStart, rowSelectedForWalls - 2, colStart, colEnd, orientation, surroundingWalls);\n                } \n                else {\n                    recursiveDivisionMaze(rowStart, rowSelectedForWalls - 2, colStart, colEnd, \"vertical\", surroundingWalls);\n                }\n                if (rowEnd - (rowSelectedForWalls + 2) > colEnd - colStart) {\n                    recursiveDivisionMaze(rowSelectedForWalls + 2, rowEnd, colStart, colEnd, orientation, surroundingWalls);\n                } \n                else {\n                    recursiveDivisionMaze(rowSelectedForWalls + 2, rowEnd, colStart, colEnd, \"vertical\", surroundingWalls);\n                }\n            } \n            else {\n                let colSelectedForWalls = evenRandomNumberInRange(colStart, colEnd);\n                let rowSelectedForHole = oddRandomNumberInRange(rowStart-1, rowEnd+1);\n                for (var i = rowStart - 1; i <= rowEnd + 1; i++) {\n                    if (i !== rowSelectedForHole) {\n                        paths.push({\n                            x_cor: i,\n                            y_cor: colSelectedForWalls\n                        });\n                        visited[i][colSelectedForWalls] = 3;\n                    }\n                }\n                if (rowEnd - rowStart > colSelectedForWalls - 2 - colStart) {\n                    recursiveDivisionMaze(rowStart, rowEnd, colStart, colSelectedForWalls - 2, \"horizontal\", surroundingWalls);\n                } \n                else {\n                    recursiveDivisionMaze(rowStart, rowEnd, colStart, colSelectedForWalls - 2, orientation, surroundingWalls);\n                }\n                if (rowEnd - rowStart > colEnd - (colSelectedForWalls + 2)) {\n                    recursiveDivisionMaze(rowStart, rowEnd, colSelectedForWalls + 2, colEnd, \"horizontal\", surroundingWalls);\n                } \n                else {\n                    recursiveDivisionMaze(rowStart, rowEnd, colSelectedForWalls + 2, colEnd, orientation, surroundingWalls);\n                }\n            }\n        };\n        recursiveDivisionMaze(2, n - 3, 2, m - 3, \"horizontal\", false);\n        const show = async () => {\n            for (let i = 0; i < paths.length; i++) {\n                wall(paths[i].x_cor, paths[i].y_cor);\n                await new Promise(r => setTimeout(r, 10));\n            }\n            setRunning(false);\n            restore_buttons();\n            setIsMazeVisualised(true);\n        }\n        show();\n    }\n\n    const handleHorizontalSkew = () => {\n        let required = 65;\n        setRunning(true);\n        if (isMazeVisualised || isVisualised) {\n            handleCompleteReset();\n        }\n        var paths = [];\n        const horizontalSkew = (rowStart, rowEnd, colStart, colEnd, orientation, surroundingWalls) => {\n            if (rowEnd < rowStart || colEnd < colStart) {\n                return;\n            }\n\n            if (!surroundingWalls) {\n                for (let r = 0; r < n; r++) {\n                    for (let c = 0; c < m; c++) {\n                        if (r === 0 || c === 0 || r === n - 1 || c === m - 1) {\n                            paths.push({\n                                x_cor: r,\n                                y_cor: c\n                            });\n                            visited[r][c] = 3;\n                        }\n                    }\n                }\n                surroundingWalls = true;\n            }\n\n            if (orientation === \"horizontal\") {\n                let rowSelectedForWalls = evenRandomNumberInRange(rowStart, rowEnd);\n                let colSelectedForHole = oddRandomNumberInRange(colStart-1, colEnd+1);\n                for (let i = colStart - 1; i <= colEnd + 1; i++) {\n                    if (i !== colSelectedForHole) {\n                        paths.push({\n                            x_cor: rowSelectedForWalls,\n                            y_cor: i\n                        });\n                        visited[rowSelectedForWalls][i] = 3\n                    }\n                }\n                let percentage = Math.floor(Math.random()*100);\n                if (rowSelectedForWalls - 2 - rowStart > colEnd - colStart) {\n                    horizontalSkew(rowStart, rowSelectedForWalls - 2, colStart, colEnd, orientation, surroundingWalls);\n                } \n                else {\n                    if(percentage >= required){\n                        horizontalSkew(rowStart, rowSelectedForWalls - 2, colStart, colEnd, \"vertical\", surroundingWalls);\n                    }\n                    else{\n                        horizontalSkew(rowStart, rowSelectedForWalls - 2, colStart, colEnd, orientation, surroundingWalls);\n                    }\n                }\n                if (rowEnd - (rowSelectedForWalls + 2) > colEnd - colStart) {\n                    horizontalSkew(rowSelectedForWalls + 2, rowEnd, colStart, colEnd, orientation, surroundingWalls);\n                } \n                else {\n                    if(percentage >= required){\n                        horizontalSkew(rowSelectedForWalls + 2, rowEnd, colStart, colEnd, \"vertical\", surroundingWalls);\n                    }\n                    else{\n                        horizontalSkew(rowSelectedForWalls + 2, rowEnd, colStart, colEnd, orientation, surroundingWalls);\n                    }\n                }\n            } \n            else {\n                let colSelectedForWalls = evenRandomNumberInRange(colStart, colEnd);\n                let rowSelectedForHole = oddRandomNumberInRange(rowStart-1, rowEnd+1);\n                for (var i = rowStart - 1; i <= rowEnd + 1; i++) {\n                    if (i !== rowSelectedForHole) {\n                        paths.push({\n                            x_cor: i,\n                            y_cor: colSelectedForWalls\n                        });\n                        visited[i][colSelectedForWalls] = 3;\n                    }\n                }\n                let percentage = Math.floor(Math.random()*100);\n                if (rowEnd - rowStart > colSelectedForWalls - 2 - colStart) {\n                    horizontalSkew(rowStart, rowEnd, colStart, colSelectedForWalls - 2, \"horizontal\", surroundingWalls);\n        \n                } \n                else {\n                    if(percentage >= required){\n                        horizontalSkew(rowStart, rowEnd, colStart, colSelectedForWalls - 2, orientation, surroundingWalls);\n                    }\n                    else{\n                        horizontalSkew(rowStart, rowEnd, colStart, colSelectedForWalls - 2, \"horizontal\", surroundingWalls);\n                    }\n                }\n                if (rowEnd - rowStart > colEnd - (colSelectedForWalls + 2)) {\n                    horizontalSkew(rowStart, rowEnd, colSelectedForWalls + 2, colEnd, \"horizontal\", surroundingWalls);\n                } \n                else {\n                    if(percentage >= required){\n                        horizontalSkew(rowStart, rowEnd, colSelectedForWalls + 2, colEnd, orientation, surroundingWalls);\n                    }\n                    else{\n                        horizontalSkew(rowStart, rowEnd, colSelectedForWalls + 2, colEnd, \"horizontal\", surroundingWalls);\n                    }\n                }\n            }\n        };\n        horizontalSkew(2, n - 3, 2, m - 3, \"horizontal\", false);\n        const show = async () => {\n            for (let i = 0; i < paths.length; i++) {\n                wall(paths[i].x_cor, paths[i].y_cor);\n                await new Promise(r => setTimeout(r, 10));\n            }\n            setRunning(false);\n            restore_buttons();\n            setIsMazeVisualised(true);\n        }\n        show();\n    }\n\n    const handleVerticalSkew = () => {\n        let required = 65;\n        setRunning(true);\n        if (isMazeVisualised || isVisualised) {\n            handleCompleteReset();\n        }\n        var paths = [];\n        const verticalSkew = (rowStart, rowEnd, colStart, colEnd, orientation, surroundingWalls) => {\n            if (rowEnd < rowStart || colEnd < colStart) {\n                return;\n            }\n\n            if (!surroundingWalls) {\n                for (let r = 0; r < n; r++) {\n                    for (let c = 0; c < m; c++) {\n                        if (r === 0 || c === 0 || r === n - 1 || c === m - 1) {\n                            paths.push({\n                                x_cor: r,\n                                y_cor: c\n                            });\n                            visited[r][c] = 3;\n                        }\n                    }\n                }\n                surroundingWalls = true;\n            }\n\n            if (orientation === \"horizontal\") {\n                let rowSelectedForWalls = evenRandomNumberInRange(rowStart, rowEnd);\n                let colSelectedForHole = oddRandomNumberInRange(colStart-1, colEnd+1);\n                for (let i = colStart - 1; i <= colEnd + 1; i++) {\n                    if (i !== colSelectedForHole) {\n                        paths.push({\n                            x_cor: rowSelectedForWalls,\n                            y_cor: i\n                        });\n                        visited[rowSelectedForWalls][i] = 3\n                    }\n                }\n                let percentage = Math.floor(Math.random()*100);\n                if (rowSelectedForWalls - 2 - rowStart > colEnd - colStart) {\n                    if(percentage >= required){\n                        verticalSkew(rowStart, rowSelectedForWalls - 2, colStart, colEnd, orientation, surroundingWalls);\n                    }\n                    else{\n                        verticalSkew(rowStart, rowSelectedForWalls - 2, colStart, colEnd, \"vertical\", surroundingWalls);\n                    }\n                } \n                else {\n                    verticalSkew(rowStart, rowSelectedForWalls - 2, colStart, colEnd, \"vertical\", surroundingWalls);\n                }\n                if (rowEnd - (rowSelectedForWalls + 2) > colEnd - colStart) {\n                    if(percentage >= required){\n                        verticalSkew(rowSelectedForWalls + 2, rowEnd, colStart, colEnd, orientation, surroundingWalls);\n                    }\n                    else{\n                        verticalSkew(rowSelectedForWalls + 2, rowEnd, colStart, colEnd, \"vertical\", surroundingWalls);\n                    }\n                } \n                else {\n                    verticalSkew(rowSelectedForWalls + 2, rowEnd, colStart, colEnd, \"vertical\", surroundingWalls);\n                }\n            } \n            else {\n                let colSelectedForWalls = evenRandomNumberInRange(colStart, colEnd);\n                let rowSelectedForHole = oddRandomNumberInRange(rowStart-1, rowEnd+1);\n                for (var i = rowStart - 1; i <= rowEnd + 1; i++) {\n                    if (i !== rowSelectedForHole) {\n                        paths.push({\n                            x_cor: i,\n                            y_cor: colSelectedForWalls\n                        });\n                        visited[i][colSelectedForWalls] = 3;\n                    }\n                }\n                let percentage = Math.floor(Math.random()*100);\n                if (rowEnd - rowStart > colSelectedForWalls - 2 - colStart) {\n                    if(percentage >= required){\n                        verticalSkew(rowStart, rowEnd, colStart, colSelectedForWalls - 2, \"horizontal\", surroundingWalls);\n                    }\n                    else{\n                        verticalSkew(rowStart, rowEnd, colStart, colSelectedForWalls - 2, orientation, surroundingWalls);\n                    }\n                } \n                else {\n                    verticalSkew(rowStart, rowEnd, colStart, colSelectedForWalls - 2, orientation, surroundingWalls);\n                }\n                if (rowEnd - rowStart > colEnd - (colSelectedForWalls + 2)) {\n                    if(percentage >= required){\n                        verticalSkew(rowStart, rowEnd, colSelectedForWalls + 2, colEnd, \"horizontal\", surroundingWalls);\n                    }\n                    else{\n                        verticalSkew(rowStart, rowEnd, colSelectedForWalls + 2, colEnd, orientation, surroundingWalls);\n                    }\n                } \n                else {\n                    verticalSkew(rowStart, rowEnd, colSelectedForWalls + 2, colEnd, orientation, surroundingWalls);\n                }\n            }\n        };\n\n           \n        verticalSkew(2, n - 3, 2, m - 3, \"vertical\", false);\n        const show = async () => {\n            for (let i = 0; i < paths.length; i++) {\n                wall(paths[i].x_cor, paths[i].y_cor);\n                await new Promise(r => setTimeout(r, 10));\n            }\n            setRunning(false);\n            restore_buttons();\n            setIsMazeVisualised(true);\n        }\n        show();\n    }\n\n    const handleRandomMazeGenerate = async() => {\n        setRunning(true);\n        if (isMazeVisualised || isVisualised) {\n            handleCompleteReset();\n        }\n      \n        for(var i=0;i<n;i++){\n            for(var j=0;j<m;j++){\n                if(Math.floor(Math.random()*100) <=20){\n                    visited[i][j] = 3;\n                    wall(i,j);\n                    await new Promise(r => setTimeout(r, 10));\n                }\n            }\n        }\n        setRunning(false);\n        restore_buttons();\n        setIsMazeVisualised(true);\n    }\n\n    const handleOkClick = () => {\n        let button1 = document.getElementById('1');\n        let button2 = document.getElementById('2');\n        let button3 = document.getElementById('3');\n        let button4 = document.getElementById('4');\n        let button5 = document.getElementById('5');\n        \n        button1.disabled = false;\n        button1.className = 'algobutton'\n        \n        button2.disabled = false;\n        button2.className = 'mazebutton'\n        \n        button3.className = 'pathReset';\n        button3.disabled = false;\n        \n        button4.className = 'gridReset'\n        button4.disabled = false;\n        \n        button5.disabled = false;\n        button5.className = 'visual';\n        button5.textContent = \"Visualize\";\n        setAlert(false);\n        setIsMazeVisualised(true);\n        setIsVisualised(true);\n        setRunning(false);\n    }\n\n    return (\n        <>\n        <Navbar algo = {algo} changeAlgo = { changeAlgo} \n                mazeAlgo = { mazeAlgo } changeMazeAlgo = {changeMazeAlgo}\n                handleBFS = {handleBFS}\n                handleDFS = {handleDFS}\n                handleMazeGeneration = {handleMazeGeneration}\n                handleHorizontalSkew = {handleHorizontalSkew}\n                handleVerticalSkew = {handleVerticalSkew}\n                handleRandomMazeGenerate = {handleRandomMazeGenerate}\n                handleVisitedReset = {handleVisitedReset}\n                handleCompleteReset = {handleCompleteReset}\n        />\n        \n        { alert && \n            <div className=\"not-found\">\n                <img src={pageNotFound} alt=\"pageNotFound\" height=\"50px\"></img>\n                <p className='not-found-text'>Path Not Found</p>\n                <button className=\"ok\" onClick={handleOkClick}>OK</button>\n            </div>\n        }\n\n        <Grid grid = {grid} setGrid = {setGrid}\n              distance = {distance} setDistance = {setDistance}\n              reached = {reached} setReached = {setReached} \n              wall = {wall}\n              isVisualised = {isVisualised }\n              running = {running}\n              src= {src} setSrc = {setSrc}\n              dest = {dest} setDest = {setDest}\n              setIsMazeVisualised = {setIsMazeVisualised}\n        />\n        <Footer />\n        </>\n    )\n}\n\nvar createGrid = (row, col) => {\n    var board = new Array(row);\n    for (let i = 0; i < row; i++) {\n        board[i] = new Array(col);\n        for (let j = 0; j < col; j++) board[i][j] = 0;\n    }\n    return board;\n}\n","export default __webpack_public_path__ + \"static/media/404.ded87f5c.svg\";","import React from 'react'\nimport fourOfour from './404.svg';\nimport {useHistory} from 'react-router-dom';\nimport './NotFound.css'\n\n\nexport default function NotFound() {\n    let history = useHistory();\n    const handleHome = () => {\n        history.push(\"/playground\");\n    }\n    return (\n        <div className=\"fOf\">\n            <img src={fourOfour} alt=\"\" height=\"250vh\"/>\n            <button className=\"back-to-home\" onClick={() => handleHome()}>Home</button>\n        </div>\n    )\n}\n","export default __webpack_public_path__ + \"static/media/trash.540f600c.svg\";","export default __webpack_public_path__ + \"static/media/rubber.e3ff2ccc.svg\";","export default __webpack_public_path__ + \"static/media/source.ef4e078d.svg\";","export default __webpack_public_path__ + \"static/media/dest.0dfc2406.svg\";","import React, { useState } from 'react'\nimport {useHistory} from 'react-router-dom'\nimport './Tutorial.css'\nimport trash from './trash.svg';\nimport rubber from './rubber.svg';\nimport source from './source.svg';\nimport dest from './dest.svg';\n\nexport default function Tutorial() {\n    const [pageNumber, setPageNumber]  = useState(1);\n    const history = useHistory();\n\n    const handleNextPage = (currentPage) => {\n        setPageNumber(currentPage+1);\n        if(pageNumber === 3){\n            history.push(\"/playground\");\n        }\n    }\n\n    const handleSkipPage = () => {\n        history.push(\"/playground\");\n    }\n\n    return (\n        <>\n        {pageNumber === 1 && \n            <div className=\"dialog-box\">\n                <div className=\"special\">\n                    <p className='msgs'>\n                        Hi! <br></br>\n                        Welcome to <br></br>\n                    </p>\n                    <p className='highlight'>Path Finder</p>\n                </div>\n                \n                <div className='buttons'>\n                    <button className=\"skip\" onClick={() => handleSkipPage()}>Skip</button>\n                    <button className=\"next\" onClick={() => handleNextPage(pageNumber)}>Next</button>\n                </div>\n            </div>\n        }\n\n        {pageNumber === 2 && \n            <div className=\"dialog-box\">\n                <div className=\"available\">\n                    <div className=\"algo\">\n                        <p className='highlight'>Search Algorithms</p>\n                        <p className='msg'>\n                            Breadth First Search <br></br>\n                            Depth First Search\n                        </p>\n                        <p className = \"imp-note\">\n                            For creating obstables click once <br></br>\n                            to start drawing on the grid <br></br> \n                            and again click to stop. In between<br></br>\n                            hover to draw.\n                        </p>\n\n                    </div>\n                    <div className=\"mazealgo\">\n                        <p className='highlight'>Ways to create <br></br>\n                        Obstacles <br></br>\n                        </p>\n                        <p className='msg'>\n                            Recursive Division <br></br>\n                            Horizontal Skew <br></br>\n                            Vertical Skew <br></br>\n                            Random Maze <br></br>\n                            Mouse Press on the Grid <br></br>\n                        </p>\n                    </div>\n                </div>\n                <div className='buttons'>\n                    <button className=\"skip\" onClick={() => handleSkipPage()}>Skip</button>\n                    <button className=\"next\" onClick={() => handleNextPage(pageNumber)}>Next</button>\n                </div>\n            </div>\n        }\n\n        {pageNumber === 3 && \n            <div className=\"dialog-box\">\n                <div className=\"menu\">\n                    <div className=\"icons\">\n                        <img src={source} alt=\"source\" height=\"50px\"/>   \n                        <img src={dest} alt=\"dest\" height=\"50px\"/> \n                        <div className=\"background\">\n                            <img src={trash} alt=\"trash\" height=\"40px\"/>\n                        </div>\n                        <div className=\"background-blocked\">\n                            <img src={trash} alt=\"trash\" height=\"40px\"/>\n                        </div>\n                        <div className=\"background\">\n                            <img src={rubber} alt=\"rubber\" height=\"40px\"/>\n                        </div>\n                        <div className=\"background-blocked\">\n                            <img src={rubber} alt=\"rubber\" height=\"40px\"/>\n                        </div>\n                    </div>\n\n                    <div className=\"text\">\n                        <p className='msgs'> Source </p>\n                        <p className='msgs'> Destination </p>\n                        <p className='msgs'> Clears the entire Grid </p>\n                        <p className='msgs'> Currently blocked </p>\n                        <p className='msgs'> Clears the Visited paths </p>\n                        <p className='msgs'> Currently blocked </p>\n                    </div>\n                </div>\n                <div className='buttons'>\n                    <button className=\"skip\" onClick={() => handleSkipPage()}>Skip</button>\n                    <button className=\"next\" onClick={() => handleNextPage(pageNumber)}>Next</button>\n                </div>\n            </div>\n        \n            }\n\n        </>\n    )\n}\n","import './App.css';\nimport Main from './Main/Main';\nimport NotFound from './NotFound/NotFound';\nimport Tutorial from './Tutorial/Tutorial';\nimport {BrowserRouter as Router, Route, Switch} from 'react-router-dom';\n\nfunction App() {\n  \n  return (\n    <Router>\n      <div className=\"App\"> \n          <Switch>\n            <Route exact path =\"/\">\n              <Tutorial />\n            </Route>\n            <Route path =\"/playground\">\n              <Main />\n            </Route>\n            <Route path =\"*\">\n              <NotFound />\n            </Route>\n          </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}